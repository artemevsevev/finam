// This file is @generated by prost-build.
/// Запрос получения информации по конкретному аккаунту
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetAccountRequest {
    /// Идентификатор аккаунта
    #[prost(string, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
}
/// Информация о конкретном аккаунте
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAccountResponse {
    /// Идентификатор аккаунта
    #[prost(string, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
    /// Тип аккаунта
    #[prost(string, tag = "2")]
    pub r#type: ::prost::alloc::string::String,
    /// Статус аккаунта
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    /// Доступные средства плюс стоимость открытых позиций
    #[prost(message, optional, tag = "4")]
    pub equity: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Нереализованная прибыль
    #[prost(message, optional, tag = "5")]
    pub unrealized_profit: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Позиции. Открытые, плюс теоретические (по неисполненным активным заявкам)
    #[prost(message, repeated, tag = "6")]
    pub positions: ::prost::alloc::vec::Vec<Position>,
    /// Сумма собственных денежных средств на счете, доступная для торговли. Не включает маржинальные средства.
    #[prost(message, repeated, tag = "7")]
    pub cash: ::prost::alloc::vec::Vec<
        super::super::super::super::google::r#type::Money,
    >,
    #[prost(oneof = "get_account_response::Portfolio", tags = "8, 9, 10")]
    pub portfolio: ::core::option::Option<get_account_response::Portfolio>,
}
/// Nested message and enum types in `GetAccountResponse`.
pub mod get_account_response {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Portfolio {
        /// Общий тип для счетов Московской Биржи. Включает в себя как единые, так и моно счета.
        #[prost(message, tag = "8")]
        PortfolioMc(super::Mc),
        /// Тип портфеля для счетов на американских рынках.
        #[prost(message, tag = "9")]
        PortfolioMct(super::Mct),
        /// Тип портфеля для торговли на срочном рынке Московской Биржи.
        #[prost(message, tag = "10")]
        PortfolioForts(super::Forts),
    }
}
/// Общий тип для счетов Московской Биржи. Включает в себя как единые, так и специализированные (моно) счета для разных секций биржи.
/// Единый торговый счет (ЕТС): Позволяет торговать на нескольких рынках (фондовый, валютный. срочный, spb, иностранные бумаги, иностранные фьючерсы) с единой денежной позиции.
/// Моно-счет фондового рынка MOEX: Изолированный счет для торговли акциями, облигациями и паями.
/// Моно-счет валютного рынка MOEX: Изолированный счет для операций с валютными парами (например, CNYRUB_TOM).
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Mc {
    /// Сумма собственных денежных средств на счете, доступная для торговли. Включает маржинальные средства.
    #[prost(message, optional, tag = "1")]
    pub available_cash: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Начальная маржа
    #[prost(message, optional, tag = "2")]
    pub initial_margin: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Минимальная маржа
    #[prost(message, optional, tag = "3")]
    pub maintenance_margin: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
}
/// Тип портфеля для счетов на американских рынках.
/// Предоставляет доступ к биржам США: NYSE, NASDAQ, CBOE, CME, сделки с американскими акциями, фьючерсами и опционами.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Mct {}
/// Тип портфеля для торговли на срочном рынке Московской Биржи.
/// Предназначен для работы с производными финансовыми инструментами: фьючерсами и опционами.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Forts {
    /// Сумма собственных денежных средств на счете, доступная для торговли. Включает маржинальные средства.
    #[prost(message, optional, tag = "1")]
    pub available_cash: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Минимальная маржа (необходимая сумма обеспечения под открытые позици)
    #[prost(message, optional, tag = "2")]
    pub money_reserved: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
}
/// Запрос получения истории по сделкам
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TradesRequest {
    /// Идентификатор аккаунта
    #[prost(string, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
    /// Лимит количества сделок
    #[prost(int32, tag = "2")]
    pub limit: i32,
    /// Начало и окончание запрашиваемого периода, Unix epoch time
    #[prost(message, optional, tag = "3")]
    pub interval: ::core::option::Option<
        super::super::super::super::google::r#type::Interval,
    >,
}
/// История по сделкам
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TradesResponse {
    /// Сделки по аккаунту
    #[prost(message, repeated, tag = "1")]
    pub trades: ::prost::alloc::vec::Vec<super::AccountTrade>,
}
/// Запрос получения списка транзакций
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransactionsRequest {
    /// Идентификатор аккаунта
    #[prost(string, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
    /// Лимит количества транзакций
    #[prost(int32, tag = "2")]
    pub limit: i32,
    /// Начало и окончание запрашиваемого периода, Unix epoch time
    #[prost(message, optional, tag = "3")]
    pub interval: ::core::option::Option<
        super::super::super::super::google::r#type::Interval,
    >,
}
/// Список транзакций
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionsResponse {
    /// Транзакции по аккаунту
    #[prost(message, repeated, tag = "1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
/// Информация о позиции
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Position {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Количество в шт., значение со знаком определяющее (long-short)
    #[prost(message, optional, tag = "2")]
    pub quantity: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Средняя цена. Не заполняется для FORTS позиций
    #[prost(message, optional, tag = "3")]
    pub average_price: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Текущая цена
    #[prost(message, optional, tag = "4")]
    pub current_price: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Поддерживающее гарантийное обеспечение. Заполняется только для FORTS позиций
    #[prost(message, optional, tag = "5")]
    pub maintenance_margin: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Прибыль или убыток за текущий день (PnL). Не заполняется для FORTS позиций
    #[prost(message, optional, tag = "6")]
    pub daily_pnl: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Суммарная нереализованная прибыль или убыток (PnL) текущей позиции
    #[prost(message, optional, tag = "7")]
    pub unrealized_pnl: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
}
/// Информация о транзакции
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Transaction {
    /// Идентификатор транзакции
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Тип транзакции из TransactionCategory
    #[deprecated]
    #[prost(string, tag = "2")]
    pub category: ::prost::alloc::string::String,
    /// Метка времени
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Символ инструмента
    #[prost(string, tag = "5")]
    pub symbol: ::prost::alloc::string::String,
    /// Изменение в деньгах
    #[prost(message, optional, tag = "6")]
    pub change: ::core::option::Option<
        super::super::super::super::google::r#type::Money,
    >,
    /// Информация о сделке
    #[prost(message, optional, tag = "7")]
    pub trade: ::core::option::Option<transaction::Trade>,
    /// Категория транзакции из TransactionCategory.
    #[prost(enumeration = "transaction::TransactionCategory", tag = "8")]
    pub transaction_category: i32,
    /// Наименование транзакции
    #[prost(string, tag = "9")]
    pub transaction_name: ::prost::alloc::string::String,
}
/// Nested message and enum types in `Transaction`.
pub mod transaction {
    /// Объект заполняется для торговых типов транзакций
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Trade {
        /// Количество в шт.
        #[prost(message, optional, tag = "1")]
        pub size: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
        /// Цена сделки за штуку. Цена исполнения/Размер премии по опциону. Это цена заключения, значение берется из сделки.
        #[prost(message, optional, tag = "2")]
        pub price: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
        /// НКД. Заполнено если в сделке есть НКД
        #[prost(message, optional, tag = "3")]
        pub accrued_interest: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
    }
    /// Категории транзакции.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum TransactionCategory {
        /// Прочее
        Others = 0,
        /// Ввод ДС
        Deposit = 1,
        /// Вывод ДС
        Withdraw = 2,
        /// Доход
        Income = 5,
        /// Комиссия
        Commission = 7,
        /// Налог
        Tax = 8,
        /// Наследство
        Inheritance = 9,
        /// Перевод ДС
        Transfer = 11,
        /// Расторжение договора
        ContractTermination = 12,
        /// Расходы
        Outcomes = 13,
        /// Штраф
        Fine = 15,
        /// Займ
        Loan = 19,
    }
    impl TransactionCategory {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Others => "OTHERS",
                Self::Deposit => "DEPOSIT",
                Self::Withdraw => "WITHDRAW",
                Self::Income => "INCOME",
                Self::Commission => "COMMISSION",
                Self::Tax => "TAX",
                Self::Inheritance => "INHERITANCE",
                Self::Transfer => "TRANSFER",
                Self::ContractTermination => "CONTRACT_TERMINATION",
                Self::Outcomes => "OUTCOMES",
                Self::Fine => "FINE",
                Self::Loan => "LOAN",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "OTHERS" => Some(Self::Others),
                "DEPOSIT" => Some(Self::Deposit),
                "WITHDRAW" => Some(Self::Withdraw),
                "INCOME" => Some(Self::Income),
                "COMMISSION" => Some(Self::Commission),
                "TAX" => Some(Self::Tax),
                "INHERITANCE" => Some(Self::Inheritance),
                "TRANSFER" => Some(Self::Transfer),
                "CONTRACT_TERMINATION" => Some(Self::ContractTermination),
                "OUTCOMES" => Some(Self::Outcomes),
                "FINE" => Some(Self::Fine),
                "LOAN" => Some(Self::Loan),
                _ => None,
            }
        }
    }
}
/// Generated client implementations.
pub mod accounts_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Сервис аккаунтов
    #[derive(Debug, Clone)]
    pub struct AccountsServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AccountsServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AccountsServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AccountsServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            AccountsServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Получение информации по конкретному аккаунту
        /// Пример HTTP запроса:
        /// GET /v1/accounts/A12345
        /// Authorization: <token>
        pub async fn get_account(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAccountRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetAccountResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.accounts.AccountsService/GetAccount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.accounts.AccountsService",
                        "GetAccount",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Получение истории по сделкам аккаунта
        /// Пример HTTP запроса:
        /// GET /v1/accounts/A12345/trades?limit=50&interval.start_time=2023-01-01T00:00:00Z&interval.end_time=2023-01-31T23:59:59Z
        /// Authorization: <token>
        ///
        /// Параметры:
        ///
        /// * account_id - передается в URL пути
        /// * limit и interval - передаются как query-параметры
        pub async fn trades(
            &mut self,
            request: impl tonic::IntoRequest<super::TradesRequest>,
        ) -> std::result::Result<tonic::Response<super::TradesResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.accounts.AccountsService/Trades",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.accounts.AccountsService",
                        "Trades",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Получение списка транзакций аккаунта
        /// Пример HTTP запроса:
        /// GET /v1/accounts/A12345/transactions?limit=50&interval.start_time=2023-01-01T00:00:00Z&interval.end_time=2023-01-31T23:59:59Z
        /// Authorization: <token>
        ///
        /// Параметры:
        ///
        /// * account_id - передается в URL пути
        /// * limit и interval - передаются как query-параметры
        pub async fn transactions(
            &mut self,
            request: impl tonic::IntoRequest<super::TransactionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransactionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.accounts.AccountsService/Transactions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.accounts.AccountsService",
                        "Transactions",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
