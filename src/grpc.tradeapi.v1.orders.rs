// This file is @generated by prost-build.
/// Запрос подписки на собственные заявки и сделки. Стрим
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct OrderTradeRequest {
    /// Изменение статуса подписки: подписка/отписка
    #[prost(enumeration = "order_trade_request::Action", tag = "1")]
    pub action: i32,
    /// Подписка только на заявки/ордера или на все сразу
    #[prost(enumeration = "order_trade_request::DataType", tag = "2")]
    pub data_type: i32,
    /// Идентификатор аккаунта
    #[prost(string, tag = "3")]
    pub account_id: ::prost::alloc::string::String,
}
/// Nested message and enum types in `OrderTradeRequest`.
pub mod order_trade_request {
    /// Доступные действия
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Action {
        /// Подписаться
        Subscribe = 0,
        /// Отписаться
        Unsubscribe = 1,
    }
    impl Action {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Subscribe => "ACTION_SUBSCRIBE",
                Self::Unsubscribe => "ACTION_UNSUBSCRIBE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ACTION_SUBSCRIBE" => Some(Self::Subscribe),
                "ACTION_UNSUBSCRIBE" => Some(Self::Unsubscribe),
                _ => None,
            }
        }
    }
    /// Тип подписки
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum DataType {
        /// Все: заявки и сделки
        All = 0,
        /// Заявки
        Orders = 1,
        /// Сделки
        Trades = 2,
    }
    impl DataType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::All => "DATA_TYPE_ALL",
                Self::Orders => "DATA_TYPE_ORDERS",
                Self::Trades => "DATA_TYPE_TRADES",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "DATA_TYPE_ALL" => Some(Self::All),
                "DATA_TYPE_ORDERS" => Some(Self::Orders),
                "DATA_TYPE_TRADES" => Some(Self::Trades),
                _ => None,
            }
        }
    }
}
/// Список собственных заявок и сделок
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderTradeResponse {
    /// Заявки
    #[prost(message, repeated, tag = "1")]
    pub orders: ::prost::alloc::vec::Vec<OrderState>,
    /// Сделки
    #[prost(message, repeated, tag = "2")]
    pub trades: ::prost::alloc::vec::Vec<super::AccountTrade>,
}
/// Запрос на получение конкретного ордера
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetOrderRequest {
    /// Идентификатор аккаунта
    #[prost(string, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
    /// Идентификатор заявки
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
/// Информация о заявке
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Order {
    /// Идентификатор аккаунта
    #[prost(string, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
    /// Символ инструмента
    #[prost(string, tag = "2")]
    pub symbol: ::prost::alloc::string::String,
    /// Количество в шт.
    #[prost(message, optional, tag = "3")]
    pub quantity: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Сторона (long или short)
    #[prost(enumeration = "super::Side", tag = "4")]
    pub side: i32,
    /// Тип заявки
    #[prost(enumeration = "OrderType", tag = "5")]
    pub r#type: i32,
    /// Срок действия заявки
    #[prost(enumeration = "TimeInForce", tag = "6")]
    pub time_in_force: i32,
    /// Необходимо для лимитной и стоп лимитной заявки
    #[prost(message, optional, tag = "7")]
    pub limit_price: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Необходимо для стоп рыночной и стоп лимитной заявки
    #[prost(message, optional, tag = "8")]
    pub stop_price: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Необходимо для стоп рыночной и стоп лимитной заявки
    #[prost(enumeration = "StopCondition", tag = "9")]
    pub stop_condition: i32,
    /// Необходимо для мульти лег заявки
    #[prost(message, repeated, tag = "10")]
    pub legs: ::prost::alloc::vec::Vec<Leg>,
    /// Уникальный идентификатор заявки. Автоматически генерируется, если не отправлен. (максимум 20 символов)
    #[prost(string, tag = "11")]
    pub client_order_id: ::prost::alloc::string::String,
    /// Срок действия условной заявки. Заполняется для заявок с типом ORDER_TYPE_STOP, ORDER_TYPE_STOP_LIMIT
    #[prost(enumeration = "ValidBefore", tag = "12")]
    pub valid_before: i32,
}
/// Лег
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Leg {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Количество
    #[prost(message, optional, tag = "2")]
    pub quantity: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Сторона
    #[prost(enumeration = "super::Side", tag = "3")]
    pub side: i32,
}
/// Состояние заявки
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderState {
    /// Идентификатор заявки
    #[prost(string, tag = "1")]
    pub order_id: ::prost::alloc::string::String,
    /// Идентификатор исполнения
    #[prost(string, tag = "2")]
    pub exec_id: ::prost::alloc::string::String,
    /// Статус заявки
    #[prost(enumeration = "OrderStatus", tag = "3")]
    pub status: i32,
    /// Заявка
    #[prost(message, optional, tag = "4")]
    pub order: ::core::option::Option<Order>,
    /// Дата и время выставления заявки
    #[prost(message, optional, tag = "5")]
    pub transact_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Дата и время принятия заявки
    #[prost(message, optional, tag = "6")]
    pub accept_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Дата и время  отмены заявки
    #[prost(message, optional, tag = "7")]
    pub withdraw_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// Запрос получения списка торговых заявок
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct OrdersRequest {
    /// Идентификатор аккаунта
    #[prost(string, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
}
/// Список торговых заявок
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrdersResponse {
    /// Заявки
    #[prost(message, repeated, tag = "1")]
    pub orders: ::prost::alloc::vec::Vec<OrderState>,
}
/// Запрос отмены торговой заявки
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CancelOrderRequest {
    /// Идентификатор аккаунта
    #[prost(string, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
    /// Идентификатор заявки
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
/// Тип заявки
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OrderType {
    /// Значение не указано
    Unspecified = 0,
    /// Рыночная
    Market = 1,
    /// Лимитная
    Limit = 2,
    /// Стоп заявка рыночная
    Stop = 3,
    /// Стоп заявка лимитная
    StopLimit = 4,
    /// Мульти лег заявка
    MultiLeg = 5,
}
impl OrderType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ORDER_TYPE_UNSPECIFIED",
            Self::Market => "ORDER_TYPE_MARKET",
            Self::Limit => "ORDER_TYPE_LIMIT",
            Self::Stop => "ORDER_TYPE_STOP",
            Self::StopLimit => "ORDER_TYPE_STOP_LIMIT",
            Self::MultiLeg => "ORDER_TYPE_MULTI_LEG",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ORDER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "ORDER_TYPE_MARKET" => Some(Self::Market),
            "ORDER_TYPE_LIMIT" => Some(Self::Limit),
            "ORDER_TYPE_STOP" => Some(Self::Stop),
            "ORDER_TYPE_STOP_LIMIT" => Some(Self::StopLimit),
            "ORDER_TYPE_MULTI_LEG" => Some(Self::MultiLeg),
            _ => None,
        }
    }
}
/// Срок действия заявки
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TimeInForce {
    /// Значение не указано
    Unspecified = 0,
    /// До конца дня
    Day = 1,
    /// Действителен до отмены
    GoodTillCancel = 2,
    /// Действителен до пересечения
    GoodTillCrossing = 3,
    /// Внебиржевая торговля
    Ext = 4,
    /// На открытии биржи
    OnOpen = 5,
    /// На закрытии биржи
    OnClose = 6,
    /// Исполнить немедленно или отменить
    Ioc = 7,
    /// Исполнить полностью или отменить
    Fok = 8,
}
impl TimeInForce {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "TIME_IN_FORCE_UNSPECIFIED",
            Self::Day => "TIME_IN_FORCE_DAY",
            Self::GoodTillCancel => "TIME_IN_FORCE_GOOD_TILL_CANCEL",
            Self::GoodTillCrossing => "TIME_IN_FORCE_GOOD_TILL_CROSSING",
            Self::Ext => "TIME_IN_FORCE_EXT",
            Self::OnOpen => "TIME_IN_FORCE_ON_OPEN",
            Self::OnClose => "TIME_IN_FORCE_ON_CLOSE",
            Self::Ioc => "TIME_IN_FORCE_IOC",
            Self::Fok => "TIME_IN_FORCE_FOK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TIME_IN_FORCE_UNSPECIFIED" => Some(Self::Unspecified),
            "TIME_IN_FORCE_DAY" => Some(Self::Day),
            "TIME_IN_FORCE_GOOD_TILL_CANCEL" => Some(Self::GoodTillCancel),
            "TIME_IN_FORCE_GOOD_TILL_CROSSING" => Some(Self::GoodTillCrossing),
            "TIME_IN_FORCE_EXT" => Some(Self::Ext),
            "TIME_IN_FORCE_ON_OPEN" => Some(Self::OnOpen),
            "TIME_IN_FORCE_ON_CLOSE" => Some(Self::OnClose),
            "TIME_IN_FORCE_IOC" => Some(Self::Ioc),
            "TIME_IN_FORCE_FOK" => Some(Self::Fok),
            _ => None,
        }
    }
}
/// Условие срабатывания стоп заявки
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StopCondition {
    /// Значение не указано
    Unspecified = 0,
    /// Цена срабатывания больше текущей цены
    LastUp = 1,
    /// Цена срабатывания меньше текущей цены
    LastDown = 2,
}
impl StopCondition {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "STOP_CONDITION_UNSPECIFIED",
            Self::LastUp => "STOP_CONDITION_LAST_UP",
            Self::LastDown => "STOP_CONDITION_LAST_DOWN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STOP_CONDITION_UNSPECIFIED" => Some(Self::Unspecified),
            "STOP_CONDITION_LAST_UP" => Some(Self::LastUp),
            "STOP_CONDITION_LAST_DOWN" => Some(Self::LastDown),
            _ => None,
        }
    }
}
/// Статус заявки
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OrderStatus {
    /// Неопределенное значение
    Unspecified = 0,
    /// Новая заявка
    New = 1,
    /// Частично исполненная
    PartiallyFilled = 2,
    /// Исполненная
    Filled = 3,
    /// Действует в течение дня
    DoneForDay = 4,
    /// Отменена
    Canceled = 5,
    /// Заменена на другую
    Replaced = 6,
    /// Ожидает отмены
    PendingCancel = 7,
    /// Отклонена
    Rejected = 9,
    /// Приостановлена
    Suspended = 10,
    /// В ожидании новой
    PendingNew = 11,
    /// Истекла
    Expired = 13,
    /// Ошибка
    Failed = 16,
    /// Пересылка
    Forwarding = 17,
    /// Ожидает
    Wait = 18,
    /// Отклонено брокером
    DeniedByBroker = 19,
    /// Отклонено биржей
    RejectedByExchange = 20,
    /// Наблюдение
    Watching = 21,
    /// Исполнена
    Executed = 22,
    /// Отключена
    Disabled = 23,
    /// Ожидание ссылки
    LinkWait = 24,
    /// Защитное время SL
    SlGuardTime = 27,
    /// Исполнена по SL
    SlExecuted = 28,
    /// Пересылка SL
    SlForwarding = 29,
    /// Защитное время TP
    TpGuardTime = 30,
    /// Исполнена по TP
    TpExecuted = 31,
    /// Коррекция TP
    TpCorrection = 32,
    /// Пересылка TP
    TpForwarding = 33,
    /// Коррекция TP в защитное время
    TpCorrGuardTime = 34,
}
impl OrderStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ORDER_STATUS_UNSPECIFIED",
            Self::New => "ORDER_STATUS_NEW",
            Self::PartiallyFilled => "ORDER_STATUS_PARTIALLY_FILLED",
            Self::Filled => "ORDER_STATUS_FILLED",
            Self::DoneForDay => "ORDER_STATUS_DONE_FOR_DAY",
            Self::Canceled => "ORDER_STATUS_CANCELED",
            Self::Replaced => "ORDER_STATUS_REPLACED",
            Self::PendingCancel => "ORDER_STATUS_PENDING_CANCEL",
            Self::Rejected => "ORDER_STATUS_REJECTED",
            Self::Suspended => "ORDER_STATUS_SUSPENDED",
            Self::PendingNew => "ORDER_STATUS_PENDING_NEW",
            Self::Expired => "ORDER_STATUS_EXPIRED",
            Self::Failed => "ORDER_STATUS_FAILED",
            Self::Forwarding => "ORDER_STATUS_FORWARDING",
            Self::Wait => "ORDER_STATUS_WAIT",
            Self::DeniedByBroker => "ORDER_STATUS_DENIED_BY_BROKER",
            Self::RejectedByExchange => "ORDER_STATUS_REJECTED_BY_EXCHANGE",
            Self::Watching => "ORDER_STATUS_WATCHING",
            Self::Executed => "ORDER_STATUS_EXECUTED",
            Self::Disabled => "ORDER_STATUS_DISABLED",
            Self::LinkWait => "ORDER_STATUS_LINK_WAIT",
            Self::SlGuardTime => "ORDER_STATUS_SL_GUARD_TIME",
            Self::SlExecuted => "ORDER_STATUS_SL_EXECUTED",
            Self::SlForwarding => "ORDER_STATUS_SL_FORWARDING",
            Self::TpGuardTime => "ORDER_STATUS_TP_GUARD_TIME",
            Self::TpExecuted => "ORDER_STATUS_TP_EXECUTED",
            Self::TpCorrection => "ORDER_STATUS_TP_CORRECTION",
            Self::TpForwarding => "ORDER_STATUS_TP_FORWARDING",
            Self::TpCorrGuardTime => "ORDER_STATUS_TP_CORR_GUARD_TIME",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ORDER_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "ORDER_STATUS_NEW" => Some(Self::New),
            "ORDER_STATUS_PARTIALLY_FILLED" => Some(Self::PartiallyFilled),
            "ORDER_STATUS_FILLED" => Some(Self::Filled),
            "ORDER_STATUS_DONE_FOR_DAY" => Some(Self::DoneForDay),
            "ORDER_STATUS_CANCELED" => Some(Self::Canceled),
            "ORDER_STATUS_REPLACED" => Some(Self::Replaced),
            "ORDER_STATUS_PENDING_CANCEL" => Some(Self::PendingCancel),
            "ORDER_STATUS_REJECTED" => Some(Self::Rejected),
            "ORDER_STATUS_SUSPENDED" => Some(Self::Suspended),
            "ORDER_STATUS_PENDING_NEW" => Some(Self::PendingNew),
            "ORDER_STATUS_EXPIRED" => Some(Self::Expired),
            "ORDER_STATUS_FAILED" => Some(Self::Failed),
            "ORDER_STATUS_FORWARDING" => Some(Self::Forwarding),
            "ORDER_STATUS_WAIT" => Some(Self::Wait),
            "ORDER_STATUS_DENIED_BY_BROKER" => Some(Self::DeniedByBroker),
            "ORDER_STATUS_REJECTED_BY_EXCHANGE" => Some(Self::RejectedByExchange),
            "ORDER_STATUS_WATCHING" => Some(Self::Watching),
            "ORDER_STATUS_EXECUTED" => Some(Self::Executed),
            "ORDER_STATUS_DISABLED" => Some(Self::Disabled),
            "ORDER_STATUS_LINK_WAIT" => Some(Self::LinkWait),
            "ORDER_STATUS_SL_GUARD_TIME" => Some(Self::SlGuardTime),
            "ORDER_STATUS_SL_EXECUTED" => Some(Self::SlExecuted),
            "ORDER_STATUS_SL_FORWARDING" => Some(Self::SlForwarding),
            "ORDER_STATUS_TP_GUARD_TIME" => Some(Self::TpGuardTime),
            "ORDER_STATUS_TP_EXECUTED" => Some(Self::TpExecuted),
            "ORDER_STATUS_TP_CORRECTION" => Some(Self::TpCorrection),
            "ORDER_STATUS_TP_FORWARDING" => Some(Self::TpForwarding),
            "ORDER_STATUS_TP_CORR_GUARD_TIME" => Some(Self::TpCorrGuardTime),
            _ => None,
        }
    }
}
/// Срок действия условной заявки
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ValidBefore {
    /// Значение не указано
    Unspecified = 0,
    /// До конца торгового дня
    EndOfDay = 1,
    /// До отмены
    GoodTillCancel = 2,
    /// До указанной даты-времени. Данный тип на текущий момент не поддерживается при выставлении заявки
    GoodTillDate = 3,
}
impl ValidBefore {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "VALID_BEFORE_UNSPECIFIED",
            Self::EndOfDay => "VALID_BEFORE_END_OF_DAY",
            Self::GoodTillCancel => "VALID_BEFORE_GOOD_TILL_CANCEL",
            Self::GoodTillDate => "VALID_BEFORE_GOOD_TILL_DATE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VALID_BEFORE_UNSPECIFIED" => Some(Self::Unspecified),
            "VALID_BEFORE_END_OF_DAY" => Some(Self::EndOfDay),
            "VALID_BEFORE_GOOD_TILL_CANCEL" => Some(Self::GoodTillCancel),
            "VALID_BEFORE_GOOD_TILL_DATE" => Some(Self::GoodTillDate),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod orders_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Сервис ордеров
    #[derive(Debug, Clone)]
    pub struct OrdersServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl OrdersServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> OrdersServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> OrdersServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            OrdersServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Выставление биржевой заявки
        /// Пример HTTP запроса:
        /// POST /v1/accounts/A12345/orders
        /// Content-Type: application/json
        /// Authorization: <token>
        ///
        /// {
        /// "symbol": "SBER@MISX",
        /// "quantity": {
        /// "value": "10"
        /// },
        /// "side": "SIDE_BUY",
        /// "type": "ORDER_TYPE_LIMIT",
        /// "time_in_force": "TIME_IN_FORCE_DAY",
        /// "limit_price": {
        /// "value": "150.50"
        /// }
        /// }
        ///
        /// Поле account_id берется из URL-пути, остальные поля передаются в теле запроса
        pub async fn place_order(
            &mut self,
            request: impl tonic::IntoRequest<super::Order>,
        ) -> std::result::Result<tonic::Response<super::OrderState>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.orders.OrdersService/PlaceOrder",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.orders.OrdersService",
                        "PlaceOrder",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Отмена биржевой заявки
        /// Пример HTTP запроса:
        /// DELETE /v1/accounts/A12345/orders/ORD789012
        /// Authorization: <token>
        pub async fn cancel_order(
            &mut self,
            request: impl tonic::IntoRequest<super::CancelOrderRequest>,
        ) -> std::result::Result<tonic::Response<super::OrderState>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.orders.OrdersService/CancelOrder",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.orders.OrdersService",
                        "CancelOrder",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Получение списка заявок для аккаунта
        /// Пример HTTP запроса:
        /// GET /v1/accounts/A12345/orders
        /// Authorization: <token>
        pub async fn get_orders(
            &mut self,
            request: impl tonic::IntoRequest<super::OrdersRequest>,
        ) -> std::result::Result<tonic::Response<super::OrdersResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.orders.OrdersService/GetOrders",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("grpc.tradeapi.v1.orders.OrdersService", "GetOrders"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Получение информации о конкретном ордере
        /// Пример HTTP запроса:
        /// GET /v1/accounts/A12345/orders/ORD789012
        /// Authorization: <token>
        pub async fn get_order(
            &mut self,
            request: impl tonic::IntoRequest<super::GetOrderRequest>,
        ) -> std::result::Result<tonic::Response<super::OrderState>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.orders.OrdersService/GetOrder",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("grpc.tradeapi.v1.orders.OrdersService", "GetOrder"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Подписка на собственные заявки и сделки. Стрим метод
        pub async fn subscribe_order_trade(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::OrderTradeRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::OrderTradeResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.orders.OrdersService/SubscribeOrderTrade",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.orders.OrdersService",
                        "SubscribeOrderTrade",
                    ),
                );
            self.inner.streaming(req, path, codec).await
        }
    }
}
