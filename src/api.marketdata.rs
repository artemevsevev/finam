// This file is @generated by prost-build.
/// Запрос получения исторических данных по инструменту (агрегированные свечи)
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BarsRequest {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Необходимый таймфрейм
    #[prost(enumeration = "TimeFrame", tag = "2")]
    pub timeframe: i32,
    /// Начало и окончание запрашиваемого периода
    #[prost(message, optional, tag = "3")]
    pub interval: ::core::option::Option<
        super::super::super::super::google::r#type::Interval,
    >,
}
/// Список агрегированных свеч
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BarsResponse {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Агрегированная свеча
    #[prost(message, repeated, tag = "2")]
    pub bars: ::prost::alloc::vec::Vec<Bar>,
}
/// Запрос получения последней котировки по инструменту
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QuoteRequest {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
}
/// Последняя котировка по инструменту
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QuoteResponse {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Цена последней сделки
    #[prost(message, optional, tag = "2")]
    pub quote: ::core::option::Option<Quote>,
}
/// Запрос получения текущего стакана по инструменту
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct OrderBookRequest {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
}
/// Текущий стакан по инструменту
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderBookResponse {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Стакан
    #[prost(message, optional, tag = "2")]
    pub orderbook: ::core::option::Option<OrderBook>,
}
/// Запрос списка последних сделок по инструменту
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LatestTradesRequest {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
}
/// Список последних сделок по инструменту
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LatestTradesResponse {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Список последних сделок
    #[prost(message, repeated, tag = "2")]
    pub trades: ::prost::alloc::vec::Vec<Trade>,
}
/// Запрос подписки на котировки по инструменту. Стрим
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SubscribeQuoteRequest {
    /// Список символов инструментов
    #[prost(string, repeated, tag = "1")]
    pub symbols: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Котировки по инструменту. Стрим
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeQuoteResponse {
    /// Список котировок
    #[prost(message, repeated, tag = "1")]
    pub quote: ::prost::alloc::vec::Vec<Quote>,
    /// Ошибка стрим сервиса
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<StreamError>,
}
/// Запрос подписки на стакан по инструменту. Стрим
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SubscribeOrderBookRequest {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
}
/// Стакан по инструменту. Стрим
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeOrderBookResponse {
    /// Список стакан стримов
    #[prost(message, repeated, tag = "1")]
    pub order_book: ::prost::alloc::vec::Vec<StreamOrderBook>,
}
/// Запрос подписки на агрегированные свечи. Стрим
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SubscribeBarsRequest {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Необходимый таймфрейм
    #[prost(enumeration = "TimeFrame", tag = "2")]
    pub timeframe: i32,
}
/// Список агрегированных свеч. Стрим
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeBarsResponse {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Агрегированная свеча
    #[prost(message, repeated, tag = "2")]
    pub bars: ::prost::alloc::vec::Vec<Bar>,
}
/// Информация об агрегированной свече
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Bar {
    /// Метка времени
    #[prost(message, optional, tag = "1")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Цена открытия свечи
    #[prost(message, optional, tag = "2")]
    pub open: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Максимальная цена свечи
    #[prost(message, optional, tag = "3")]
    pub high: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Минимальная цена свечи
    #[prost(message, optional, tag = "4")]
    pub low: ::core::option::Option<super::super::super::super::google::r#type::Decimal>,
    /// Цена закрытия свечи
    #[prost(message, optional, tag = "5")]
    pub close: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Объём торгов за свечу в шт.
    #[prost(message, optional, tag = "6")]
    pub volume: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
}
/// Информация о котировке
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Quote {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Метка времени
    #[prost(message, optional, tag = "2")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Аск. 0 при отсутствии активного аска
    #[prost(message, optional, tag = "3")]
    pub ask: ::core::option::Option<super::super::super::super::google::r#type::Decimal>,
    /// Размер аска
    #[prost(message, optional, tag = "4")]
    pub ask_size: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Бид. 0 при отсутствии активного бида
    #[prost(message, optional, tag = "5")]
    pub bid: ::core::option::Option<super::super::super::super::google::r#type::Decimal>,
    /// Размер бида
    #[prost(message, optional, tag = "6")]
    pub bid_size: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Цена последней сделки
    #[prost(message, optional, tag = "7")]
    pub last: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Размер последней сделки
    #[prost(message, optional, tag = "8")]
    pub last_size: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Дневной объем сделок
    #[prost(message, optional, tag = "9")]
    pub volume: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Дневной оборот сделок
    #[prost(message, optional, tag = "10")]
    pub turnover: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Цена открытия. Дневная
    #[prost(message, optional, tag = "11")]
    pub open: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Максимальная цена. Дневная
    #[prost(message, optional, tag = "12")]
    pub high: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Минимальная цена. Дневная
    #[prost(message, optional, tag = "13")]
    pub low: ::core::option::Option<super::super::super::super::google::r#type::Decimal>,
    /// Цена закрытия. Дневная
    #[prost(message, optional, tag = "14")]
    pub close: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Изменение цены (last минус close)
    #[prost(message, optional, tag = "15")]
    pub change: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    #[prost(oneof = "quote::Additions", tags = "50")]
    pub additions: ::core::option::Option<quote::Additions>,
}
/// Nested message and enum types in `Quote`.
pub mod quote {
    /// Информация об опционе
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Option {
        /// Открытый интерес
        #[prost(message, optional, tag = "1")]
        pub open_interest: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
        /// Подразумеваемая волатильность
        #[prost(message, optional, tag = "2")]
        pub implied_volatility: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
        /// Теоретическая цена
        #[prost(message, optional, tag = "3")]
        pub theoretical_price: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
        /// Delta
        #[prost(message, optional, tag = "4")]
        pub delta: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
        /// Gamma
        #[prost(message, optional, tag = "5")]
        pub gamma: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
        /// Theta
        #[prost(message, optional, tag = "6")]
        pub theta: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
        /// Vega
        #[prost(message, optional, tag = "7")]
        pub vega: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
        /// Rho
        #[prost(message, optional, tag = "8")]
        pub rho: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
    }
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Additions {
        /// Информация об опционе
        #[prost(message, tag = "50")]
        Option(Option),
    }
}
/// Информация о стакане
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderBook {
    /// Уровни стакана
    #[prost(message, repeated, tag = "1")]
    pub rows: ::prost::alloc::vec::Vec<order_book::Row>,
}
/// Nested message and enum types in `OrderBook`.
pub mod order_book {
    /// Информация об уровне в стакане (строке)
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Row {
        /// Цена
        #[prost(message, optional, tag = "1")]
        pub price: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
        /// Команда
        #[prost(enumeration = "row::Action", tag = "4")]
        pub action: i32,
        /// Идентификатор участника рынка
        #[prost(string, tag = "5")]
        pub mpid: ::prost::alloc::string::String,
        /// Метка времени
        #[prost(message, optional, tag = "6")]
        pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
        #[prost(oneof = "row::Side", tags = "2, 3")]
        pub side: ::core::option::Option<row::Side>,
    }
    /// Nested message and enum types in `Row`.
    pub mod row {
        /// Команда
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Action {
            /// Действие не указано
            Unspecified = 0,
            /// Удалить
            Remove = 1,
            /// Добавить
            Add = 2,
            /// Обновить
            Update = 3,
        }
        impl Action {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Self::Unspecified => "ACTION_UNSPECIFIED",
                    Self::Remove => "ACTION_REMOVE",
                    Self::Add => "ACTION_ADD",
                    Self::Update => "ACTION_UPDATE",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "ACTION_UNSPECIFIED" => Some(Self::Unspecified),
                    "ACTION_REMOVE" => Some(Self::Remove),
                    "ACTION_ADD" => Some(Self::Add),
                    "ACTION_UPDATE" => Some(Self::Update),
                    _ => None,
                }
            }
        }
        #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
        pub enum Side {
            /// Размер на продажу
            #[prost(message, tag = "2")]
            SellSize(super::super::super::super::super::super::google::r#type::Decimal),
            /// Размер на покупку
            #[prost(message, tag = "3")]
            BuySize(super::super::super::super::super::super::google::r#type::Decimal),
        }
    }
}
/// Информация о сделке
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Trade {
    /// Идентификатор сделки, отправленный биржей
    #[prost(string, tag = "1")]
    pub trade_id: ::prost::alloc::string::String,
    /// Идентификатор участника рынка
    #[prost(string, tag = "2")]
    pub mpid: ::prost::alloc::string::String,
    /// Метка времени
    #[prost(message, optional, tag = "3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Цена сделки
    #[prost(message, optional, tag = "4")]
    pub price: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Размер сделки
    #[prost(message, optional, tag = "5")]
    pub size: ::core::option::Option<
        super::super::super::super::google::r#type::Decimal,
    >,
    /// Сторона сделки (buy или sell)
    #[prost(enumeration = "super::Side", tag = "6")]
    pub side: i32,
}
/// Ошибка стрим сервиса
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StreamError {
    /// Код ошибки
    #[prost(int32, tag = "1")]
    pub code: i32,
    /// Описание ошибки
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
}
/// Стакан по инструменту. Стрим
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamOrderBook {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Уровни стакана
    #[prost(message, repeated, tag = "2")]
    pub rows: ::prost::alloc::vec::Vec<stream_order_book::Row>,
}
/// Nested message and enum types in `StreamOrderBook`.
pub mod stream_order_book {
    /// Информация об уровне в стакане (строке)
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Row {
        /// Цена
        #[prost(message, optional, tag = "1")]
        pub price: ::core::option::Option<
            super::super::super::super::super::google::r#type::Decimal,
        >,
        /// Команда
        #[prost(enumeration = "row::Action", tag = "4")]
        pub action: i32,
        /// Идентификатор участника рынка
        #[prost(string, tag = "5")]
        pub mpid: ::prost::alloc::string::String,
        /// Метка времени
        #[prost(message, optional, tag = "6")]
        pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
        #[prost(oneof = "row::Side", tags = "2, 3")]
        pub side: ::core::option::Option<row::Side>,
    }
    /// Nested message and enum types in `Row`.
    pub mod row {
        /// Команда
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Action {
            /// Действие не указано
            Unspecified = 0,
            /// Удалить
            Remove = 1,
            /// Добавить
            Add = 2,
            /// Обновить
            Update = 3,
        }
        impl Action {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Self::Unspecified => "ACTION_UNSPECIFIED",
                    Self::Remove => "ACTION_REMOVE",
                    Self::Add => "ACTION_ADD",
                    Self::Update => "ACTION_UPDATE",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "ACTION_UNSPECIFIED" => Some(Self::Unspecified),
                    "ACTION_REMOVE" => Some(Self::Remove),
                    "ACTION_ADD" => Some(Self::Add),
                    "ACTION_UPDATE" => Some(Self::Update),
                    _ => None,
                }
            }
        }
        #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
        pub enum Side {
            /// Размер на продажу
            #[prost(message, tag = "2")]
            SellSize(super::super::super::super::super::super::google::r#type::Decimal),
            /// Размер на покупку
            #[prost(message, tag = "3")]
            BuySize(super::super::super::super::super::super::google::r#type::Decimal),
        }
    }
}
/// Запрос списка последних сделок по инструменту. Стрим
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SubscribeLatestTradesRequest {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
}
/// Список последних сделок по инструменту. Стрим
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeLatestTradesResponse {
    /// Символ инструмента
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Список сделок
    #[prost(message, repeated, tag = "2")]
    pub trades: ::prost::alloc::vec::Vec<Trade>,
}
/// Доступные таймфреймы для свечей
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TimeFrame {
    /// Таймфрейм не указан
    Unspecified = 0,
    /// 1 минута. Глубина данных 7 дней.
    M1 = 1,
    /// 5 минут. Глубина данных 30 дней.
    M5 = 5,
    /// 15 минут. Глубина данных 30 дней.
    M15 = 9,
    /// 30 минут. Глубина данных 30 дней.
    M30 = 11,
    /// 1 час. Глубина данных 30 дней.
    H1 = 12,
    /// 2 часа. Глубина данных 30 дней.
    H2 = 13,
    /// 4 часа. Глубина данных 30 дней.
    H4 = 15,
    /// 8 часов. Глубина данных 30 дней.
    H8 = 17,
    /// День. Глубина данных 365 дней.
    D = 19,
    /// Неделя. Глубина данных 365\*5 дней.
    W = 20,
    /// Месяц. Глубина данных 365\*5 дней.
    Mn = 21,
    /// Квартал. Глубина данных 365\*5 дней.
    Qr = 22,
}
impl TimeFrame {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "TIME_FRAME_UNSPECIFIED",
            Self::M1 => "TIME_FRAME_M1",
            Self::M5 => "TIME_FRAME_M5",
            Self::M15 => "TIME_FRAME_M15",
            Self::M30 => "TIME_FRAME_M30",
            Self::H1 => "TIME_FRAME_H1",
            Self::H2 => "TIME_FRAME_H2",
            Self::H4 => "TIME_FRAME_H4",
            Self::H8 => "TIME_FRAME_H8",
            Self::D => "TIME_FRAME_D",
            Self::W => "TIME_FRAME_W",
            Self::Mn => "TIME_FRAME_MN",
            Self::Qr => "TIME_FRAME_QR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TIME_FRAME_UNSPECIFIED" => Some(Self::Unspecified),
            "TIME_FRAME_M1" => Some(Self::M1),
            "TIME_FRAME_M5" => Some(Self::M5),
            "TIME_FRAME_M15" => Some(Self::M15),
            "TIME_FRAME_M30" => Some(Self::M30),
            "TIME_FRAME_H1" => Some(Self::H1),
            "TIME_FRAME_H2" => Some(Self::H2),
            "TIME_FRAME_H4" => Some(Self::H4),
            "TIME_FRAME_H8" => Some(Self::H8),
            "TIME_FRAME_D" => Some(Self::D),
            "TIME_FRAME_W" => Some(Self::W),
            "TIME_FRAME_MN" => Some(Self::Mn),
            "TIME_FRAME_QR" => Some(Self::Qr),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod market_data_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Сервис рыночных данных
    #[derive(Debug, Clone)]
    pub struct MarketDataServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MarketDataServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MarketDataServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MarketDataServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MarketDataServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Получение исторических данных по инструменту (агрегированные свечи)
        /// Пример HTTP запроса:
        /// GET /v1/instruments/SBER@MISX/bars?timeframe=TIME_FRAME_D&interval.start_time=2023-01-01T00:00:00Z&interval.end_time=2023-01-31T23:59:59Z
        /// Authorization: <token>
        ///
        /// Параметры:
        ///
        /// * symbol - передается в URL пути
        /// * timeframe и interval - передаются как query-параметры
        pub async fn bars(
            &mut self,
            request: impl tonic::IntoRequest<super::BarsRequest>,
        ) -> std::result::Result<tonic::Response<super::BarsResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.marketdata.MarketDataService/Bars",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.marketdata.MarketDataService",
                        "Bars",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Получение последней котировки по инструменту
        /// Пример HTTP запроса:
        /// GET /v1/instruments/SBER@MISX/quotes/latest
        /// Authorization: <token>
        pub async fn last_quote(
            &mut self,
            request: impl tonic::IntoRequest<super::QuoteRequest>,
        ) -> std::result::Result<tonic::Response<super::QuoteResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.marketdata.MarketDataService/LastQuote",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.marketdata.MarketDataService",
                        "LastQuote",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Получение текущего стакана по инструменту
        /// Пример HTTP запроса:
        /// GET /v1/instruments/SBER@MISX/orderbook
        /// Authorization: <token>
        pub async fn order_book(
            &mut self,
            request: impl tonic::IntoRequest<super::OrderBookRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OrderBookResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.marketdata.MarketDataService/OrderBook",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.marketdata.MarketDataService",
                        "OrderBook",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Получение списка последних сделок по инструменту
        /// Пример HTTP запроса:
        /// GET /v1/instruments/SBER@MISX/trades/latest
        /// Authorization: <token>
        pub async fn latest_trades(
            &mut self,
            request: impl tonic::IntoRequest<super::LatestTradesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LatestTradesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.marketdata.MarketDataService/LatestTrades",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.marketdata.MarketDataService",
                        "LatestTrades",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Подписка на котировки по инструменту. Стрим метод
        pub async fn subscribe_quote(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeQuoteRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SubscribeQuoteResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.marketdata.MarketDataService/SubscribeQuote",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.marketdata.MarketDataService",
                        "SubscribeQuote",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// Подписка на стакан по инструменту. Стрим метод
        pub async fn subscribe_order_book(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeOrderBookRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SubscribeOrderBookResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.marketdata.MarketDataService/SubscribeOrderBook",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.marketdata.MarketDataService",
                        "SubscribeOrderBook",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// Подписка на сделки по инструменту. Стрим метод
        pub async fn subscribe_latest_trades(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeLatestTradesRequest>,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<super::SubscribeLatestTradesResponse>,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.marketdata.MarketDataService/SubscribeLatestTrades",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.marketdata.MarketDataService",
                        "SubscribeLatestTrades",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// Подписка на агрегированные свечи. Стрим метод
        pub async fn subscribe_bars(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeBarsRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SubscribeBarsResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc.tradeapi.v1.marketdata.MarketDataService/SubscribeBars",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "grpc.tradeapi.v1.marketdata.MarketDataService",
                        "SubscribeBars",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
